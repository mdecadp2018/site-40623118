<h1>簡介</h1><p>2018 Fall 計算機程式與電腦輔助設計實習課程分組網站</p><p>四設計二甲 40623118 楊秉澤</p><p></p><p><a href="https://github.com/mdecadp2018/site-40623118">Github 個人倉儲</a></p><p><a href="https://github.com/mdecadp2018/finalproject-ag2">期末專案小組倉儲</a></p><h2>CMSimfly 網站</h2><p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p><p><a href="https://mdecadp2018.github.io/site-40623118/content/index.html">CMsimfly</a></p><h2>reveal 投影片</h2><p><a href="https://mdecadp2018.github.io/site-40623118/reveal/index.html#/">投影片</a></p><h2>pelican 網誌</h2><p><a href="https://mdecadp2018.github.io/site-40623118/blog/index.html">Blog</a></p><p></p><h1>課堂內容</h1><p><span>設計是一種明確與具體的表達, 而且是在仔細思考、多方考量後所完成的表達, 表達具有六種形式, 包括口語、文字、2D、3D、數學與實體表達, 設計的結果可以讓執行者有所依循, 根據指示執行後, 可得預期之結果. </span><br><br><span>機械是一種器物, 而且是由固體、流體與軟體元件精巧組合而成, 可互動運作, 達成特定功能之器物. </span><br><br><span>因此機械設計就是靈活運用六種表達, 明確說明如何透過固體、流體與軟體元件之互動運作, 而能達成預定結果之明確與具體表達.</span></p><h2>Week1</h2><p><span>上課物品</span></p><p><span></span></p><p><span>準備隨身碟、耳機、麥克風與紙本筆記</span></p><p><span>可攜隨身系統</span></p><p>下載<a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view">p37</a>可攜系統，並解壓縮至個人隨身碟裡</p><p></p><p>每周作業</p><p></p><p><span>領取個人的期中作業，並每周更新CMSimfly、reveal 簡報、pelican 網誌與倉儲</span></p><h2>Week2</h2><p>分支設定</p><p></p><p>利用 git checkout 內的 master 分支切換到 gh-pages</p><p>Github上的分支也必須去設定把它改為gh-pages</p><p></p><p>更改密碼</p><p></p><p>以 python wsgi.py 啟動 CMSimfly 動態網站，以自己的管理者密碼在近端進行改版</p><h2>Week3</h2><p><span></span><a href="https://mdecadp2018.github.io/site-40623118/content/%E5%95%9F%E5%8B%95%20p37%20%E5%8F%AF%E6%94%9C%E7%B3%BB%E7%B5%B1.html">git練習</a></p><p>為了使大家更充分了解git的語法</p><p><a href="https://www.onshape.com/"><span>Onshape </span></a></p><p><span>Onshape 是一套純雲端 MCAD (Mechanical Computer Aided Design) 套件, 可以利用電腦中的瀏覽器, 手機或平板中的 App, 就可以執行 2D/3D 零組件設計繪圖。</span></p><p><span>雲端應用的特性是: 用多少運算資源, 才開啟多少運算資源, 可最佳化且不至超載。</span></p><p><a href="https://www.merriam-webster.com/"><span>英英字典</span></a></p><p><span>使用英英字典來查詢不懂的單字，在課程上是為了要了解Onshape原文電子書裡的單字</span></p><p><span>相較於英漢字典有助於加深記憶與複習</span></p><h2>Week4</h2><p><span>※應注意，並能注意，而未注意，為過失</span></p><p>blog</p><p><span>維護部落格必須切記 pelican.leo 內建立每周內容必須注意 slug 的名稱不得與其他周的 slug 一樣，否則系統無法得知是要使用哪個 slug 的內容，而導致整個部落格無法顯示。</span></p><p>CMSimfly</p><p>切記CMSimfly的影片或圖片不能用Heading1~6，需用Performatted來標示，否則會無法顯示。</p><p>如有遇到此問題，應開啟SciTE，再開啟tmp&rarr;所上傳的資料夾&rarr;content&rarr;選擇有問題的網頁，把前後的標題刪除就能解決此問題。</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/RZeyMRqCkew" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/1SaHGDRgnoE" allowfullscreen="allowfullscreen"></iframe></p><h2>Week5</h2><p>Cmd</p><p>將其改成最新版本<a href="https://gitforwindows.org/">2.19.1</a>，因有些東西需要最新版本才能開啟或上傳。</p><p>而如果遇到更新後無法上傳，請試試觀看<a href="https://mdecadp2018.github.io/site-40623118/content/Week6.html">Week 6</a>，或許有用。</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/XbMiwRAsn0o" allowfullscreen="allowfullscreen"></iframe></p><h2>Week6</h2><p>發現問題與解決辦法</p><p>一、</p><p>不知道是不是因為上周更新cmd版本的問題所導致的</p><p>Q : 無法clone與add版本</p><p>Y:\tmp&gt;git clone https://github.com/mdecadp2018/site-40623118 test</p><p>Cloning into 'test'... fatal: unable to access 'https://github.com/mdecadp2018/site-40623118/': error setting certificate verify locations: CAfile: y:/git/mingw64/bin/curl-ca-bundle.crt CApath: none</p><p>A : Y:\tmp&gt;git config --global http.sslverify "false"(僅需此行指令，下方皆為處理程序)</p><p>Y:\tmp&gt;git clone https://github.com/mdecadp2018/site-40623118 test</p><p>Cloning into 'test'... remote: Enumerating objects: 857, done. remote: Counting objects: 100% (857/857), done.</p><p>remote: Compressing objects: 100% (469/469), done.</p><p>remote: Total 857 (delta 309), reused 832 (delta 290), pack-reused 0 Receiving objects: 100% (857/857), 3.68 MiB | 380.00 KiB/s, done.</p><p>Resolving deltas: 100% (309/309), done. Checking out files: 100% (614/614), done.</p><p>二、</p><p>Q : 在LEO編輯後 遠端與近端所更新的版本不同</p><p>A : 在上面的問題解決之後 重新clone一個(名:test) 與之前的版本(名:site)有所衝突 LEO近端所顯示的是site的版本 而遠端所顯示的是test的版本</p><h2>Week7</h2><p><span> CMSimfly </span></p><p><span>說明在使用 CMSimfly 過程，碰到無法正確解讀 config/content.htm 時，可更新程式碼或回報問題的流程。(可參考此<a href="https://mdecadp2018.github.io/site-40623118/content/Week4.html">網頁</a>)</span></p><p>Github遠端故障</p><p>原因</p><p>具體來講是因為網路故障且儲存的倉儲位置也連帶故障，導致多數人進行遠端傳送，有些許的障礙出現，但近端仍有更動。</p><p>解決</p><p>因為避免相同的衝突再次發生，所以有了因應的措施，必須先想出可應對的方法。</p><p></p><p></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/sdUpun-TOP8" allowfullscreen="allowfullscreen"></iframe></p><p></p><p></p><h2>Week8</h2><p>最後整理</p><p>持續更新Github、CMSimfly、blog與投影片</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/KNBBMhe_jEQ" allowfullscreen="allowfullscreen"></iframe></p><p><img src="/images/chrome_2018-11-02_10-49-21.jpg" width="600" height="294" alt=""></p><p><img src="/images/chrome_2018-11-02_11-45-22.jpg" width="580" height="335" alt=""></p><pre></pre><h1>Git</h1><p>git 常用指令</p><p>git add .</p><p>新增所有改版內容</p><p>git commit -m "提交訊息, 用來辨識版本"</p><p>在近端提交改版內容</p><p>git push</p><p>將近端改版內容推送到遠端</p><p>git pull (<a href="https://www.git-tower.com/learn/git/faq/difference-between-git-fetch-git-pull">比較</a>與 git fetch 的差異與兩者用法)</p><p>拉下遠端新版本內容, 在 fossil scm 使用 fossil update</p><p>git log</p><p>查驗 git 提交推送紀錄</p><p>git status</p><p>查驗狀態</p><p>git 新增提交推送的身分綁定</p><p></p><h1>啟動 p37 可攜系統</h1><p><br>在其中一個 Dos 命令列中, 輸入:</p><p>c:</p><p>表示要從 y: 槽切換到 c: 槽, 然後再下:</p><p>cd \</p><p>表示要更換目錄到 c: 槽的根目錄. 接下來建立一個 test 目錄:</p><p>mkdir test</p><p>然後更換目錄到此 test 目錄中.</p><p>cd test</p><p>接下來要執行 git 指令, 表示要將 test 起始為 Git 的倉儲:</p><p>git init</p><p>這時, c:\test 目錄中會新增一個 .git 目錄, 表示現在這個 c:\test 已經是 Git 倉儲.</p><p>接下來要利用 SciTE 編輯器, 在 test 目錄中建立一個 myprogram.txt 文字檔案, 在此之前, 請利用 SciTE 的下拉式功能表 Options 中的 Open Global Options File 開啟</p><p>SciTEGlobal.properties 設定檔案, 找到第 137 行的</p><p>load.on.activate=1</p><p>去掉原先最前頭的 "#" 符號, 然後存檔, 之後關閉所有開啟的 SciTE 編輯器, 如此, 可以讓</p><p>SciTE 所開啟的檔案, 內容有修改時, 可以即時呈現在編輯區中.</p><p>接著, 重新在 Dos 命令列中輸入:</p><p>y:\SciTE\bin\Sc1.exe</p><p>開啟已經修改 SciTEGlobal.properties 設定檔案之後的 SciTE 編輯區, 並且在</p><p>myprogram.txt 檔案中, 只加入一行:</p><p>my program</p><p>接著存檔, 這時 c:\test 目錄中除了有 .git 目錄, 又多了一個 myprogram.txt 檔案.</p><p>接下來要對 c:\test 倉儲進行新增與提交流程, 將 myprogram.txt 納入 .git 的版次管理.</p><p>git add myprogram.txt</p><p>git commit -m "initial add"</p><p>這時, c:\test 倉儲中已經有一個改版的記錄, 接下來再編輯 myprogram.txt 檔案. 在其中</p><p>的 "my program" 字串後, 連按兩個 Enter 後, 加入:</p><p>first function</p><p>然後存檔, 接著再執行 git add 與 git commit:</p><p>git add .</p><p>git commit -m "add first function"</p><p>接著重覆上述編輯動作, 新增 "second function"</p><p>然後, 再執行 git add 與 git commit :</p><p>git add .</p><p>git commit -m "add second function"</p><p>這時, 使用者已經可以利用:</p><p>git log</p><p>看到倉儲中已經有三個提交. 分別為:</p><p>a3a2eb3 add second function 9295dfd add first function 3019d3f initial add</p><p>這時若希望在加入 first function 版本狀態時, 新增一個測試功能, 若通過測試符合需求,</p><p>則併入已經納入 second function 的版本中, 若不符合需求, 則可將該測試分支刪除.</p><p>先準備將工作目錄, 導回 "add first function" 的提交版本.</p><p>git checkout 9295dfd</p><p>然後以此提交版本內容, 新增一個 dev 分支:</p><p>git branch dev</p><p>然後利用 git checkout 在工作目錄中導出 dev 的版本 (其實, 修改前的 dev 狀態與 "add</p><p>first function" 提交時相同</p><p>git checkout dev</p><p>接下來, 對 myprogram.txt 改版, 在 first function 字串後, 連按兩個 Enter 後, 輸入:</p><p>add test function</p><p>myprogram.txt 存檔後, 接著, 進行另一次的新增與提交.</p><p>git add .</p><p>git commit -m "add test function"</p><p>這時若希望看到各提交點間的關係, 可以利用:</p><p>git log --graph --oneline --all</p><p>然後, 假設該測試功能已經通過, 準備與 add second function 後的版本進行合併, 這時</p><p>git 出現 myprogram.txt 合併衝突, 因為 first function 後, 已經加入 seconf function, 但</p><p>是 dev 分支是在 first function 加入後所導出的版本, 因此使用者在合併當下, 必須決定</p><p>add second function 與 add test function, 是只保留其中一項功能, 或者同時保留.</p><p>git checkout master</p><p>將工作目錄轉為 master 的版本, 然後將 dev 分支的內容合併進來:</p><p>git merge dev</p><p>這時的 myprogram.txt 內容為:</p><p>必須要刪除衝突標註符號, 同時保留 add second function 與 add test function, 存檔後</p><p>成為:</p><p>最後對此一合併後的版本, 進行新增與提交:</p><p>git add .</p><p>git commit -m "complete first, second and test functions adding"</p><p>再以 git log --oneline --graph --all 檢查各提交間的關聯, 畫面如下圖所示:</p><p>利用以上方式管理檔案版次的好處是, 使用者可以透過高效能的 Git 工具, 導出各提交點</p><p>的版本, 或者從任一版本建立分支進行各種測試, 不會影響到其他提交版本資料的發布,</p><p>等到近端的 git 倉儲進一步推送到遠端的伺服器時, 遠端倉儲不僅可以提供協同, 也可提</p><p>升資料保全效益, 無論是近端或遠端電腦硬碟發生問題, 都可以從任一參與協同的倉儲</p><p>中回復所有已經提交的各版本內容.</p><p>最後要將工作目錄導向最初 initial add 提交時的版本:</p><p>git checkout 9439e67</p><p>導回 add first function 時的版本:</p><p>git checkout 5fcdac9</p><p>導回 add second function 時的版本:</p><p>git checkout fb092cc</p><p>導回 dev 時的狀態:</p><p>git checkout 1c3d5ff</p><p>將工作目錄導回最後 master 合併 dev 分支的版本:</p><p>git checkout ace97d7</p><p>將上述 test (畫面中為 test1) 目錄壓縮後: cp_w3_test_repo.7z</p><p>經過上述的 Git 近端指令操作, 可以了解在程式開發過程, 可以透過 Git 分散式版本管理</p><p>系統的功能, 以非常具有彈性的流程進行程式碼的編寫, 尤其當協同開發人員眾多時, Git</p><p>與 Github 將更能發揮其條理開發的特定, 並且安全地保存各版次資料內容.</p><p>除了 Git 與 Github, 在計算機程式課程中還推薦另一項使用者較容易全盤主導的分散式</p><p>版次管理工具: Fossil SCM.</p><p>Fossil SCM 的功能類似 Git, 而且近端工具與遠端工具都只需要一個檔案: fossil.exe (目</p><p>前的最新版本為 2.7 版, 可以從 https://fossil-scm.org/index.html/uv/download.html 下</p><p>載)</p><p>等大家都熟悉如何使用 Git 與 Github 來管理所開發的 Python 程式碼之後, 我們將在分</p><p>組協同專案執行過程, 介紹如何在自建的 Ubuntu 伺服器上安裝 Fossil SCM.</p><p></p><h1>筆記</h1><p><img src="/images/S__11223063.jpg" width="200" height="267" alt=""></p><p><img src="/images/S__11223064.jpg" width="200" height="267" alt=""></p><p><img src="/images/S__11223065.jpg" width="200" height="267" alt=""></p><p><img src="/images/S__11223066.jpg" width="200" height="267" alt=""></p><p></p><p><img src="/images/pinball-1 by 18.jpg" width="1360" height="608" alt=""></p><p><img src="/images/pinball-2 by 18.jpg" width="1360" height="606" alt=""></p><p><img src="/images/pinball-3 by 18.jpg" width="1360" height="610" alt=""></p><p><img src="/images/stair2 change by 18.jpg" width="1360" height="611" alt=""></p><p><img src="/images/stair3 change by18.jpg" width="1360" height="606" alt=""></p><p><img src="/images/camshaft change by 18.jpg" width="1358" height="608" alt=""></p><h1>Git 教材(暫)</h1><h2>1.1 關於版本的控制</h2><div><span>很多人作版本控制的方法是把檔案複製到另一個目錄（</span><span>如果他們夠聰明的話，他們還會幫資料夾加上時間）。&nbsp;</span></div><div><span>這種做法很常見，因為這樣做很簡單，</span><span>但是卻也非常容易產生離譜的錯誤。</span></div><div><span>&nbsp;這種做法非常容易搞混資料夾，</span><span>意外寫錯檔案或複製覆蓋到不想要的檔案。</span></div><div><span></span></div><h2>3.1使用 Git 分支 - 簡述分支</h2><p id="r_create_new_branch">建立一個新的分支</p><p id="r_switching_branches">在分支之間切換</p><p>切換到發佈產品用的分支。</p><p>在同一個提交上建立一個新分支，在這個分支上修正問題。</p><p>通過測試後，切回發佈產品用的分支，將修正用的分支合併進來，然後再推送（push）出去以發佈產品。</p><p>切換到之前實現新需求的分支以繼續工作。</p><h2>4.1 伺服器上的 Git</h2><div><span>4.1伺服器上的Git - 通訊協定</span></div><div><span>通訊協定</span></div><div><span>Git可以使用四種主要協議來傳輸數據：</span></div><div><span>Local、HTTP、Secure Shell（SSH）和Git。</span></div><div><span>&nbsp;</span></div><div><span>Local protocols</span></div><div><span>優點:</span></div><div><span>1.可以直接將存儲庫副本粘貼到每個人都具有共享存取權限的位置，</span></div><div><span>並像設置任何其他共享目錄一樣設置讀/寫權限。</span></div><div><span>2.運用這些指令(git pull /home/john/project等)</span></div><div><span>通常會更簡單地使他們推送到遠端，並且您也方便拉取。</span></div><div><span>缺點:</span></div><div><span>1.共享存取通常更難以從多個位置進行設置和存取。</span></div><div><span>2.若在家使用筆電的話，需額外安裝遠端系統，否則會相對於基本網路存取還要來得困難與慢上許多。</span></div><div><span>3.每個用戶都具有對&ldquo;遠程&rdquo;目錄的完全要訪問權限，</span></div><div><span>並且沒有任何東西阻止他們更改或刪除內部Git文件並破壞存儲庫。</span></div><div><span>shell shall</span></div><div><span>&nbsp;</span></div><div><span>SSH通訊協定</span></div><div><span>優點:</span></div><div><span>1.SSH相對容易設置，且它的守護程序很常見</span></div><div><span>2.透過SSH存取是安全的，所有數據傳輸都經過加密和身份驗證。</span></div><div><span>3.像HTTP/S、Git與Local protocols一樣，使數據在傳輸之前盡可能緊湊。</span></div><div><span>缺點:</span></div><div><span>1.無法通過它對存儲庫進行匿名存取。</span></div><div><span>2.如果想允許匿名存取項目並且還想使用SSH，</span></div><div><span>則必須設置SSH以便推送，但其他內容可供其他人獲取。</span></div><div><span>&nbsp;</span></div><div><span>Git協定</span></div><div><span>優點:</span></div><div><span>1.為最快的網絡傳輸協議。</span></div><div><span>2.若為公共項目提供大量流量或</span></div><div><span>為不需要用戶身份驗證進行讀取的大型項，</span></div><div><span>則可能需要設置Git守護程序。</span></div><div><span>3.Git存儲庫可供所有人克隆。</span></div><div><span>缺點:</span></div><div><span>1.缺乏身份驗證。</span></div><div><span>2.通常為唯一存取權限(即推送、寫入等)，</span></div><div><span>若開啟推送存取權限，則網路上能到找到項目的URL</span></div><div><span>並任何人可推送到項目裡。</span></div><div><span>&nbsp;</span></div><div><span>HTTP</span></div><div><span>可分為兩種，分別為新制(智能)與舊制。</span></div><div><span>新制(智能):</span></div><div><span>與SSH或Git協定的運行方式非常相似，它可以設置為像git://協議一樣匿名服務，</span></div><div><span>也可以通過SSH協議等身份驗證和加密來推送。</span></div><div><span>舊制:</span></div><div><span>直接將Git存儲庫提供為來自Web服務器的普通文件，優點在於設置它的簡單性。</span></div><div><span>此外，任何可以訪問放置存儲庫的Web服務器的人都可以存取您的存儲庫。</span></div><div><span>&nbsp;</span></div><div><span>以下優缺點於新制(智能)HTTP</span></div><div><span>優點:</span></div><div><span>1.能夠使用用戶名和密碼進行身份驗證。</span></div><div><span>2.通過HTTPS以只讀方式提供存儲庫。</span></div><div><span>缺點:</span></div><div><span>與某些服務器上的SSH相比，在HTTP/S上使用Git可能會有點棘手。</span></div><div><span>&nbsp;</span></div><div><span>**NFS</span></div><div><span>它最大的功能就是可以透過網路，讓不同的機器</span></div><div><span>、不同的作業系統、可以彼此分享個別的檔案</span></div><h2>5.1 分散式的 Git - 分散式工作流程</h2><p id="_分散式工作流程">分散式工作流程分為下列三種</p><p id="_集中式工作流程">集中式工作流程</p><p id="r_integration_manager">整合式管理員工作流程</p><p id="_司令官與副官工作流程">司令官與副官工作流程</p><h1>手足球</h1><h2>學員出席</h2><p>04/29(第11周) : 出席</p><p>05/06(第12周) : 出席</p><p>05/13(第13周) : 出席</p><p>05/20(第14周) : 出席</p><p>05/27(第15周) : 出席</p><p>06/03(第16周) : 出席</p><p><span></span></p><h2>Github 倉儲管理</h2><p><span></span><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g3_1/graphs/contributors">ag3_1</a></p><p><a href="https://github.com/40623128/cd2019a/graphs/contributors">cd2019a</a></p><p><a href="https://github.com/mdecadp2018/site-40623118/graphs/contributors">個人倉儲</a></p><h2>Onshape 協同操作</h2><p><span>05/20</span></p><p><span>詢問隊員後，發現他們對於組合圖的組裝尚未完成，並不熟悉限制條件與方式，也示範一次如何組裝來幫助他們加快組裝，由於需繁複的調整與限制方式，只好請部分組員一起幫忙組裝。<br></span></p><p><span>考慮到桿子與足球左右所移動的距離限制，左右兩側各增加一個篩子來限制。</span></p><p><span>而若還有遇到什麼限制問題，我會與他們討論並一起解決問題。</span></p><p><span><iframe width="560" height="314" src="//www.youtube.com/embed/8K-59ISQux0" allowfullscreen="allowfullscreen"></iframe></span></p><p><span>由於送球機構(如影片中中間的半圓機構)轉換成V-rep時，會自動轉換成一體，因對於送球機構之設計是要將其能夠360度做迴轉的動作，發現對於尺寸設計過於剛好，故將應可作動之尺寸更改大小。</span></p><p><span><iframe width="560" height="314" src="//www.youtube.com/embed/1jI4ycqSsnk" allowfullscreen="allowfullscreen"></iframe></span></p><p><span></span></p><h2>V-rep 模擬</h2><p>W11</p><p>這週的進度是分配工作，v-rep 模擬的部分是由陳微云40623105，李如芳40623109，楊秉澤40623118來負責，張華倞40623128（組長）則是幫助我們有困難的地方，幫助我們解決問題。總共分成兩個部分，第一部分是簡化，第二部分是處理樹狀圖加模擬。一開始因為還要設計及畫圖，所以這週整組先一起設計球桌大小及各個零件的大小，並上網查資料再一起討論。</p><p><span></span>W12 (05/06)</p><p>因為須將手足球繪製出來，故先使用先前的圖檔來進行模擬。</p><p>與小組討論如何將零件依序放製成相關聯的樹狀圖，並將其一的桿件使其轉動，與嘗試將桿件與球員進行簡化和熟悉簡化按鍵方式。</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/2ZhJYcfZ7ms" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/InFd99SzftQ" allowfullscreen="allowfullscreen"></iframe></p><p>0512</p><p>再次嘗試將球員進行兩種不同方式來簡化。</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/09P2cU0QMus?t=25s" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/QKG-ZMY12Qs?t=2s" allowfullscreen="allowfullscreen"></iframe></p><p>W13 (05/13)</p><p>嘗試將球員與桿子化為一體並簡化，與進行讓桿件左右移動。</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/jLj4x16FeSg" allowfullscreen="allowfullscreen"></iframe></p><p>05/19</p><p>簡化球門；發現匯入V-rep球桌跟下方軌道變一體</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/JuFc46vSzuQ?feature=youtu" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/V1DTrDMbeIw?feature=youtu" allowfullscreen="allowfullscreen"></iframe></p><p>W14 (05/20)</p><p>幫助限制組合圖 : 更改尺寸</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/8K-59ISQux0" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/1jI4ycqSsnk" allowfullscreen="allowfullscreen"></iframe></p><p>05/22</p><p>再更簡化球員、桿子與篩子</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/HLf9ddvARq8" allowfullscreen="allowfullscreen"></iframe></p><p>05/23</p><p>製作板子來簡化球桌</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/xw30fQEnwRw" allowfullscreen="allowfullscreen"></iframe></p><p>W15</p><p>製作樹狀圖</p><p><iframe width="560" height="314" src="//www.youtube.com/embed/bF1KWEvMCv0" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/9RefYdyNEyE" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/5cvDG4Fi6Cw" allowfullscreen="allowfullscreen"></iframe></p><h3>簡化方法</h3><p><span><iframe width="560" height="314" src="//www.youtube.com/embed/YmQlG03cHHk" allowfullscreen="allowfullscreen"></iframe></span></p><p>導入組合圖</p><p>File&gt;Import&gt;Mesh...&gt;所選組合圖</p><p>組合圖炸開</p><p>選取零件右鍵&gt;Edit&gt;Grouping/Merging&gt;Divide selected shapes</p><p><span>對於球桌、球員、篩子與球桿簡化(簡易版)</span></p><p><span>Toggle shape edit mode(左六)僅對於"一個"物體作簡化形成多個三角形</span></p><p><span>先開啟另一個New scene，將所想的物件複製過去，先複製一個來做簡化，否則多個物件做簡化時，會無法選取倒三角形內部或自己錯亂</span></p><p><span>另外，長板子有兩種方式，以球桌為例，按Toggle shape edit mode後，</span></p><p><span>1.為選取所想要的平面(可不須全選)，選取四角後按Extract cuboid後(系統會將所選所有三角形自動計算出最大尺寸)，</span></p><p><span>Scene objects properties(左二)&gt;Shape&gt;View/modify geometry&gt;Keep proportions取消勾選，在Bounding box size長厚度後，在Object/item shift(上七)座移動，與球桌對齊</span></p><p><span>2.為選取所想要的平面(可不須全選)，選取四角後"再選取平面上方三角形(厚度)"Extract cuboid後(系統會將所選所有三角形自動計算出最大尺寸)，就完成了</span></p><p><span>而其他有圓弧形狀需簡化的話，將其物件簡化全選後按Extract shape，但也可選取物件按右鍵&gt;Edit&gt;Decimate selected shape，可選擇三角形的多寡。</span></p><p><span>&nbsp;</span></p><p><span>**</span></p><p><span>Extract shape 為類似像皮膚一樣的一層</span></p><p><span>Extract cuboid 為長平板</span></p><p><span>Extract cylinder 為長圓柱</span></p><p><span>Extract sphere 為長球</span></p><p></p><h2>程式開發</h2><p>觀看組員所修改的程式，並加以理解，也發現錯誤導致其中一根球桿無法轉動，但可以移動。已提醒組員程式有誤。</p><p><img src="/images/vrep_SRroKyMYj5.png" width="1360" height="734" alt=""></p><p><a href="https://drive.google.com/file/d/1GCDo04ei3lFMPxXtaAo_cm0WZjwf65Wo/view?usp=sharing">原組員程式</a></p><p>下方<a href="https://drive.google.com/file/d/1AZti8HR0fWkeHMBYjp8D2Mfd0AqsYSV4/view?usp=sharing">程式</a>.py</p><div><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import vrepimport keyboardfrom time import sleepimport sys, math# child threaded script: # 內建使用 port 19997 若要加入其他 port, 在  serve 端程式納入#simExtRemoteApiStart(19999) vrep.simxFinish(-1) clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)#clientID解釋: client客戶 ID為辨別身分的證明KickBallV =360   #故定義踢球速度、移動速度與轉動角度Move_Minus =-0.1         Move_Plus =0.1R_KickBallVel = (math.pi/180)*KickBallVB_KickBallVel = -(math.pi/180)*KickBallVif clientID!= -1:#當clientID= -１    print("Connected to remote server")else:    print('Connection not successful')    sys.exit('Could not connect') errorCode,Sphere_handle=vrep.simxGetObjectHandle(clientID,'Sphere',vrep.simx_opmode_oneshot_wait)#指定各物件對應到在V-rep的參數errorCode,BRod_handle=vrep.simxGetObjectHandle(clientID,'BRod',vrep.simx_opmode_oneshot_wait)#定義errorCodeerrorCode,BRev_handle=vrep.simxGetObjectHandle(clientID,'BRev',vrep.simx_opmode_oneshot_wait)errorCode,BMo_handle=vrep.simxGetObjectHandle(clientID,'BMo',vrep.simx_opmode_oneshot_wait)errorCode,BRev1_handle=vrep.simxGetObjectHandle(clientID,'BRev1',vrep.simx_opmode_oneshot_wait)errorCode,BRev0_handle=vrep.simxGetObjectHandle(clientID,'BRev0',vrep.simx_opmode_oneshot_wait)errorCode,BMo0_handle=vrep.simxGetObjectHandle(clientID,'BMo0',vrep.simx_opmode_oneshot_wait)errorCode,BRev1_1_handle=vrep.simxGetObjectHandle(clientID,'BRev1_1',vrep.simx_opmode_oneshot_wait)errorCode,BRev1_2_handle=vrep.simxGetObjectHandle(clientID,'BRev1_2',vrep.simx_opmode_oneshot_wait)errorCode,BMo1_handle=vrep.simxGetObjectHandle(clientID,'BMo1',vrep.simx_opmode_oneshot_wait)errorCode,BRev2_1_handle=vrep.simxGetObjectHandle(clientID,'BRev2_1',vrep.simx_opmode_oneshot_wait)errorCode,BRev2_2_handle=vrep.simxGetObjectHandle(clientID,'BRev2_2',vrep.simx_opmode_oneshot_wait)errorCode,BMo2_handle=vrep.simxGetObjectHandle(clientID,'BMo2',vrep.simx_opmode_oneshot_wait)errorCode,RRev_handle=vrep.simxGetObjectHandle(clientID,'RRev',vrep.simx_opmode_oneshot_wait)errorCode,RMo_handle=vrep.simxGetObjectHandle(clientID,'RMo',vrep.simx_opmode_oneshot_wait)errorCode,RRod_handle=vrep.simxGetObjectHandle(clientID,'RRod',vrep.simx_opmode_oneshot_wait)if errorCode == -1:#當clientID= -１，errorCode 也= -１    print('Can not find left or right motor')    sys.exit()    def stop():    errorCode = vrep.simxStopSimulation(clientID,vrep.simx_opmode_oneshot_wait)#定義停止、開始與暫停    def start():    errorCode = vrep.simxStartSimulation(clientID,vrep.simx_opmode_oneshot_wait)    def pause():    errorCode = vrep.simxPauseSimulation(clientID,vrep.simx_opmode_oneshot_wait)def getballposition():#定義得到球體位置後自行手動切換球桿作動    while True:        try:            if keyboard.is_pressed('1'):#定義按１時，會切換到B１桿移動、轉動                try:                    if keyboard.is_pressed('x'):                        vrep.simxSetJointTargetVelocity(clientID,BRev_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BRev_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                    if keyboard.is_pressed('z'):                        vrep.simxSetJointTargetVelocity(clientID,BMo_handle,0.2,vrep.simx_opmode_oneshot_wait)                    elif keyboard.is_pressed('c'):                        vrep.simxSetJointTargetVelocity(clientID,BMo_handle,-0.2,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BMo_handle,0,vrep.simx_opmode_oneshot_wait)                except:                    break            if keyboard.is_pressed('2'):#定義按２時，會切換到B２桿移動#並且B２桿的兩個球員轉動                try:                    if keyboard.is_pressed('x'):                        vrep.simxSetJointTargetVelocity(clientID,BRev1_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev0_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BRev1_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev0_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                    if keyboard.is_pressed('z'):                        vrep.simxSetJointTargetVelocity(clientID,BMo0_handle,0.2,vrep.simx_opmode_oneshot_wait)                    elif keyboard.is_pressed('c'):                        vrep.simxSetJointTargetVelocity(clientID,BMo0_handle,-0.2,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BMo0_handle,0,vrep.simx_opmode_oneshot_wait)                except:                    break                                if keyboard.is_pressed('3'): #定義按３時，會切換到Ｂ１桿移動#並且Ｂ１桿的兩個球員轉動                try:                    if keyboard.is_pressed('x'):                        vrep.simxSetJointTargetVelocity(clientID,BRev1_1_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev1_2_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BRev1_1_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev1_2_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                    if keyboard.is_pressed('z'):                        vrep.simxSetJointTargetVelocity(clientID,BMo1_handle,0.2,vrep.simx_opmode_oneshot_wait)                    elif keyboard.is_pressed('c'):                        vrep.simxSetJointTargetVelocity(clientID,BMo1_handle,-0.2,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BMo1_handle,0,vrep.simx_opmode_oneshot_wait)                except:                    break                                if keyboard.is_pressed('4'):#定義按４時，會切換到Ｂ２桿移動、轉動#並且Ｂ２桿的兩個球員轉動                try:                    if keyboard.is_pressed('x'):                        vrep.simxSetJointTargetVelocity(clientID,BRev2_1_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev2_2_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BRev2_1_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                        vrep.simxSetJointTargetVelocity(clientID,BRev2_2_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)                    if keyboard.is_pressed('z'):                        vrep.simxSetJointTargetVelocity(clientID,BMo2_handle,0.2,vrep.simx_opmode_oneshot_wait)                    elif keyboard.is_pressed('c'):                        vrep.simxSetJointTargetVelocity(clientID,BMo2_handle,-0.2,vrep.simx_opmode_oneshot_wait)                    else:                        vrep.simxSetJointTargetVelocity(clientID,BMo2_handle,0,vrep.simx_opmode_oneshot_wait)                except:                    break        except:            break        try:            if keyboard.is_pressed('u'):                 vrep.simxSetJointTargetVelocity(clientID,RRev_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait) #定義按ｕｉｏｐ時，Ｒ桿移動、轉動            elif keyboard.is_pressed('i'):                  vrep.simxSetJointTargetVelocity(clientID,RRev_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)            if keyboard.is_pressed('o'):                  vrep.simxSetJointTargetVelocity(clientID,RMo_handle,0.2,vrep.simx_opmode_oneshot_wait)            elif keyboard.is_pressed('p'):                  vrep.simxSetJointTargetVelocity(clientID,RMo_handle,-0.2,vrep.simx_opmode_oneshot_wait)            else:                vrep.simxSetJointTargetVelocity(clientID,RMo_handle,0,vrep.simx_opmode_oneshot_wait)        except:            break    vrep.simxSetJointTargetVelocity(clientID,BRev_handle,0,vrep.simx_opmode_oneshot_wait)vrep.simxSetJointTargetVelocity(clientID,RRev_handle,0,vrep.simx_opmode_oneshot_wait)vrep.simxSetJointTargetVelocity(clientID,RMo_handle,0,vrep.simx_opmode_oneshot_wait)start()getballposition()stop()#vrep.simxSetJointTargetVelocity(clientID,BRev_handle,B_KickBallVel,vrep.simx_opmode_oneshot_wait)#vrep.simxSetJointTargetVelocity(clientID,BMo_handle,Move,vrep.simx_opmode_oneshot_wait)#vrep.simxSetJointTargetVelocity(clientID,RRev_handle,R_KickBallVel,vrep.simx_opmode_oneshot_wait)#vrep.simxSetJointTargetVelocity(clientID,RMo_handle,Move,vrep.simx_opmode_oneshot_wait)</pre></div><div></div><h2>簡化與模擬測試問題與討論</h2><p>0519</p><p><a href="https://youtu.be/V1DTrDMbeIw">Vrep Divide selection shapes error 模擬分解錯誤疑慮</a></p><p>如影片所示，在Onshape繪製零件與組裝時，零件都是分別繪製與組裝。</p><p>但到了Vrep進行Divide selection shapes 卻是一體的，無法再次分解，如下圖所示。</p><p>疑慮 :</p><p>紅色方框應對應到足球桌本體，而下方三個水藍色方框應再分別再對應出另外三個物體。</p><p><img src="/images/vrep_46cM2j4VQ7.png" width="1125" height="614" alt=""></p><p></p><p>0520</p><p>解決方法為更改發球機構的尺寸</p><p>發球機構</p><p><img src="/images/chrome_WHLF1sayLi.png" width="1680" height="826" alt=""></p><p></p><p><span>更改前</span></p><p><span><img src="/images/H1bUaD4awZ.png" width="1450" height="926" alt=""></span></p><p></p><p><span>更改後</span></p><p><span><img src="/images/ZNvNddFcA1.png" width="1450" height="930" alt=""></span></p><p></p><p>與同學討論後，如圖發球機構的淺藍色尺寸不應該深藍色尺寸一致，不然模擬V-rep時恐會使這兩部分零件形成一體。</p><p>而桌子下方三個零件不須模擬期動或轉動，所以配合尺寸無更改。</p><h2>無法編輯</h2><p>0520</p><p>期中後到今天都可以使用40623128(組長)所fork的Github，但當天卻發現無法編輯任何東西，且沒顯示任何內文，也重新clone多次，如下圖。</p><p><img src="/images/chrome_h3yEGbyJHl.png" width="848" height="398" alt=""></p><p>0523</p><p>與組長討論過後，懷疑是否是因為之前自行製作可攜系統而下載的python3.7.2在背景執行所導致的。</p><p>刪除過後已可以看到內文與可以編輯，但無法完全確定是否完全是因為python的問題。</p><p></p>