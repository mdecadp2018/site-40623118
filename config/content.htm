<h1>簡介</h1><p>2018 Fall 計算機程式與電腦輔助設計實習課程分組網站</p><p>四設計二甲 40623118 楊秉澤</p><p></p><p><a href="https://github.com/mdecadp2018/site-40623118">Github</a></p><h2>CMSimfly 網站</h2><p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p><p><a href="https://mdecadp2018.github.io/site-40623118/content/index.html">CMsimfly</a></p><h2>reveal 投影片</h2><p><a href="https://mdecadp2018.github.io/site-40623118/reveal/index.html#/">投影片</a></p><h2>pelican 網誌</h2><p><a href="https://mdecadp2018.github.io/site-40623118/blog/index.html">Blog</a></p><p></p><h1>課堂內容</h1><p><span>設計是一種明確與具體的表達, 而且是在仔細思考、多方考量後所完成的表達, 表達具有六種形式, 包括口語、文字、2D、3D、數學與實體表達, 設計的結果可以讓執行者有所依循, 根據指示執行後, 可得預期之結果. </span><br><br><span>機械是一種器物, 而且是由固體、流體與軟體元件精巧組合而成, 可互動運作, 達成特定功能之器物. </span><br><br><span>因此機械設計就是靈活運用六種表達, 明確說明如何透過固體、流體與軟體元件之互動運作, 而能達成預定結果之明確與具體表達.</span></p><h2>Week1</h2><p><span>上課物品</span></p><p><span></span></p><p><span>準備隨身碟、耳機、麥克風與紙本筆記</span></p><p><span>可攜隨身系統</span></p><p>下載<a href="https://drive.google.com/file/d/1Pkkjg8RX3pkZkjWEBlQBggw11u5YSn5i/view">p37</a>可攜系統，並解壓縮至個人隨身碟裡</p><p></p><p>每周作業</p><p></p><p><span>領取個人的期中作業，並每周更新CMSimfly、reveal 簡報、pelican 網誌與倉儲</span></p><h2>Week2</h2><p>分支設定</p><p></p><p>利用 git checkout 內的 master 分支切換到 gh-pages</p><p>Github上的分支也必須去設定把它改為gh-pages</p><p></p><p>更改密碼</p><p></p><p>以 python wsgi.py 啟動 CMSimfly 動態網站，以自己的管理者密碼在近端進行改版</p><h2>Week3</h2><p><span></span>git練習</p><p>為了使大家更充分了解git的語法</p><p><a href="https://www.onshape.com/"><span>Onshape </span></a></p><p><span>Onshape 是一套純雲端 MCAD (Mechanical Computer Aided Design) 套件, 可以利用電腦中的瀏覽器, 手機或平板中的 App, 就可以執行 2D/3D 零組件設計繪圖。</span></p><p><span>雲端應用的特性是: 用多少運算資源, 才開啟多少運算資源, 可最佳化且不至超載。</span></p><p><a href="https://www.merriam-webster.com/"><span>英英字典</span></a></p><p><span>使用英英字典來查詢不懂的單字，在課程上是為了要了解Onshape原文電子書裡的單字</span></p><p><span>相較於英漢字典有助於加深記憶與複習</span></p><h2>Week4</h2><p><iframe width="560" height="314" src="//www.youtube.com/embed/RZeyMRqCkew" allowfullscreen="allowfullscreen"></iframe></p><p><iframe width="560" height="314" src="//www.youtube.com/embed/1SaHGDRgnoE" allowfullscreen="allowfullscreen"></iframe></p><h2>Week5</h2><p><iframe width="560" height="314" src="//www.youtube.com/embed/XbMiwRAsn0o" allowfullscreen="allowfullscreen"></iframe></p><h2>Week6</h2><p>發先問題與解決辦法</p><p>一、</p><p>不知道是不是因為上周更新cmd版本的問題所導致的</p><p>Q : 無法clone與add版本</p><p>Y:\tmp&gt;git clone https://github.com/mdecadp2018/site-40623118 test</p><p>Cloning into 'test'... fatal: unable to access 'https://github.com/mdecadp2018/site-40623118/': error setting certificate verify locations: CAfile: y:/git/mingw64/bin/curl-ca-bundle.crt CApath: none</p><p>A : Y:\tmp&gt;git config --global http.sslverify "false"</p><p>Y:\tmp&gt;git clone https://github.com/mdecadp2018/site-40623118 test</p><p>Cloning into 'test'... remote: Enumerating objects: 857, done. remote: Counting objects: 100% (857/857), done. remote: Compressing objects: 100% (469/469), done. remote: Total 857 (delta 309), reused 832 (delta 290), pack-reused 0 Receiving objects: 100% (857/857), 3.68 MiB | 380.00 KiB/s, done.</p><p>Resolving deltas: 100% (309/309), done. Checking out files: 100% (614/614), done.</p><p>二、</p><p>Q : 在LEO編輯後 遠端與近端所更新的版本不同</p><p>A : 在上面的問題解決之後 重新clone一個(名:test) 與之前的版本(名:site)有所衝突 LEO近端所顯示的是site的版本 而遠端所顯示的是test的版本</p><h2>Week7</h2><p><iframe width="560" height="314" src="//www.youtube.com/embed/sdUpun-TOP8" allowfullscreen="allowfullscreen"></iframe></p><p></p><p></p><h2>Week8</h2><p><iframe width="560" height="314" src="//www.youtube.com/embed/KNBBMhe_jEQ" allowfullscreen="allowfullscreen"></iframe></p><p><img src="/images/chrome_2018-11-02_10-49-21.jpg" width="600" height="294" alt=""></p><p><img src="/images/chrome_2018-11-02_11-45-22.jpg" width="580" height="335" alt=""></p><pre>在組裝的過程中發現會變這樣，思考了很久，才發現原來Onshape不像Soildworks一樣能以所限制的指令來改變方向，而是靠上方的指令來轉變方向的，感覺非常新鮮</pre><h1>Git</h1><p>git 常用指令</p><p>git add .</p><p>新增所有改版內容</p><p>git commit -m "提交訊息, 用來辨識版本"</p><p>在近端提交改版內容</p><p>git push</p><p>將近端改版內容推送到遠端</p><p>git pull (<a href="https://www.git-tower.com/learn/git/faq/difference-between-git-fetch-git-pull">比較</a>與 git fetch 的差異與兩者用法)</p><p>拉下遠端新版本內容, 在 fossil scm 使用 fossil update</p><p>git log</p><p>查驗 git 提交推送紀錄</p><p>git status</p><p>查驗狀態</p><p>git 新增提交推送的身分綁定</p><p></p><h1>啟動 p37 可攜系統</h1><p><br>在其中一個 Dos 命令列中, 輸入:</p><p>c:</p><p>表示要從 y: 槽切換到 c: 槽, 然後再下:</p><p>cd \</p><p>表示要更換目錄到 c: 槽的根目錄. 接下來建立一個 test 目錄:</p><p>mkdir test</p><p>然後更換目錄到此 test 目錄中.</p><p>cd test</p><p>接下來要執行 git 指令, 表示要將 test 起始為 Git 的倉儲:</p><p>git init</p><p>這時, c:\test 目錄中會新增一個 .git 目錄, 表示現在這個 c:\test 已經是 Git 倉儲.</p><p>接下來要利用 SciTE 編輯器, 在 test 目錄中建立一個 myprogram.txt 文字檔案, 在此之前, 請利用 SciTE 的下拉式功能表 Options 中的 Open Global Options File 開啟</p><p>SciTEGlobal.properties 設定檔案, 找到第 137 行的</p><p>load.on.activate=1</p><p>去掉原先最前頭的 "#" 符號, 然後存檔, 之後關閉所有開啟的 SciTE 編輯器, 如此, 可以讓</p><p>SciTE 所開啟的檔案, 內容有修改時, 可以即時呈現在編輯區中.</p><p>接著, 重新在 Dos 命令列中輸入:</p><p>y:\SciTE\bin\Sc1.exe</p><p>開啟已經修改 SciTEGlobal.properties 設定檔案之後的 SciTE 編輯區, 並且在</p><p>myprogram.txt 檔案中, 只加入一行:</p><p>my program</p><p>接著存檔, 這時 c:\test 目錄中除了有 .git 目錄, 又多了一個 myprogram.txt 檔案.</p><p>接下來要對 c:\test 倉儲進行新增與提交流程, 將 myprogram.txt 納入 .git 的版次管理.</p><p>git add myprogram.txt</p><p>git commit -m "initial add"</p><p>這時, c:\test 倉儲中已經有一個改版的記錄, 接下來再編輯 myprogram.txt 檔案. 在其中</p><p>的 "my program" 字串後, 連按兩個 Enter 後, 加入:</p><p>first function</p><p>然後存檔, 接著再執行 git add 與 git commit:</p><p>git add .</p><p>git commit -m "add first function"</p><p>接著重覆上述編輯動作, 新增 "second function"</p><p>然後, 再執行 git add 與 git commit :</p><p>git add .</p><p>git commit -m "add second function"</p><p>這時, 使用者已經可以利用:</p><p>git log</p><p>看到倉儲中已經有三個提交. 分別為:</p><p>a3a2eb3 add second function 9295dfd add first function 3019d3f initial add</p><p>這時若希望在加入 first function 版本狀態時, 新增一個測試功能, 若通過測試符合需求,</p><p>則併入已經納入 second function 的版本中, 若不符合需求, 則可將該測試分支刪除.</p><p>先準備將工作目錄, 導回 "add first function" 的提交版本.</p><p>git checkout 9295dfd</p><p>然後以此提交版本內容, 新增一個 dev 分支:</p><p>git branch dev</p><p>然後利用 git checkout 在工作目錄中導出 dev 的版本 (其實, 修改前的 dev 狀態與 "add</p><p>first function" 提交時相同</p><p>git checkout dev</p><p>接下來, 對 myprogram.txt 改版, 在 first function 字串後, 連按兩個 Enter 後, 輸入:</p><p>add test function</p><p>myprogram.txt 存檔後, 接著, 進行另一次的新增與提交.</p><p>git add .</p><p>git commit -m "add test function"</p><p>這時若希望看到各提交點間的關係, 可以利用:</p><p>git log --graph --oneline --all</p><p>然後, 假設該測試功能已經通過, 準備與 add second function 後的版本進行合併, 這時</p><p>git 出現 myprogram.txt 合併衝突, 因為 first function 後, 已經加入 seconf function, 但</p><p>是 dev 分支是在 first function 加入後所導出的版本, 因此使用者在合併當下, 必須決定</p><p>add second function 與 add test function, 是只保留其中一項功能, 或者同時保留.</p><p>git checkout master</p><p>將工作目錄轉為 master 的版本, 然後將 dev 分支的內容合併進來:</p><p>git merge dev</p><p>這時的 myprogram.txt 內容為:</p><p>必須要刪除衝突標註符號, 同時保留 add second function 與 add test function, 存檔後</p><p>成為:</p><p>最後對此一合併後的版本, 進行新增與提交:</p><p>git add .</p><p>git commit -m "complete first, second and test functions adding"</p><p>再以 git log --oneline --graph --all 檢查各提交間的關聯, 畫面如下圖所示:</p><p>利用以上方式管理檔案版次的好處是, 使用者可以透過高效能的 Git 工具, 導出各提交點</p><p>的版本, 或者從任一版本建立分支進行各種測試, 不會影響到其他提交版本資料的發布,</p><p>等到近端的 git 倉儲進一步推送到遠端的伺服器時, 遠端倉儲不僅可以提供協同, 也可提</p><p>升資料保全效益, 無論是近端或遠端電腦硬碟發生問題, 都可以從任一參與協同的倉儲</p><p>中回復所有已經提交的各版本內容.</p><p>最後要將工作目錄導向最初 initial add 提交時的版本:</p><p>git checkout 9439e67</p><p>導回 add first function 時的版本:</p><p>git checkout 5fcdac9</p><p>導回 add second function 時的版本:</p><p>git checkout fb092cc</p><p>導回 dev 時的狀態:</p><p>git checkout 1c3d5ff</p><p>將工作目錄導回最後 master 合併 dev 分支的版本:</p><p>git checkout ace97d7</p><p>將上述 test (畫面中為 test1) 目錄壓縮後: cp_w3_test_repo.7z</p><p>經過上述的 Git 近端指令操作, 可以了解在程式開發過程, 可以透過 Git 分散式版本管理</p><p>系統的功能, 以非常具有彈性的流程進行程式碼的編寫, 尤其當協同開發人員眾多時, Git</p><p>與 Github 將更能發揮其條理開發的特定, 並且安全地保存各版次資料內容.</p><p>除了 Git 與 Github, 在計算機程式課程中還推薦另一項使用者較容易全盤主導的分散式</p><p>版次管理工具: Fossil SCM.</p><p>Fossil SCM 的功能類似 Git, 而且近端工具與遠端工具都只需要一個檔案: fossil.exe (目</p><p>前的最新版本為 2.7 版, 可以從 https://fossil-scm.org/index.html/uv/download.html 下</p><p>載)</p><p>等大家都熟悉如何使用 Git 與 Github 來管理所開發的 Python 程式碼之後, 我們將在分</p><p>組協同專案執行過程, 介紹如何在自建的 Ubuntu 伺服器上安裝 Fossil SCM.</p>